"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.addLintingGenerator = void 0;
const core_1 = require("@angular-devkit/core");
const schematics_1 = require("@angular-devkit/schematics");
const ngcli_adapter_1 = require("@nrwl/devkit/ngcli-adapter");
const workspace_1 = require("@nrwl/workspace");
const lint_1 = require("../../utils/lint");
function addLinting(options) {
    return schematics_1.chain([
        workspace_1.addLintFiles(options.projectRoot, options.linter, {
            onlyGlobal: options.linter === "tslint" /* TsLint */,
            localConfig: options.linter === "tslint" /* TsLint */
                ? undefined
                : lint_1.createAngularEslintJson(options.projectRoot, options.prefix),
            extraPackageDeps: options.linter === "tslint" /* TsLint */ ? undefined : lint_1.extraEslintDependencies,
        }),
        options.projectType === 'application' && options.linter === "tslint" /* TsLint */
            ? updateTsLintConfig(options)
            : schematics_1.noop(),
        options.projectType === 'library' && options.linter === "tslint" /* TsLint */
            ? workspace_1.updateJsonInTree(`${options.projectRoot}/tslint.json`, (json) => {
                return Object.assign(Object.assign({}, json), { extends: `${workspace_1.offsetFromRoot(options.projectRoot)}tslint.json`, linterOptions: {
                        exclude: ['!**/*'],
                    } });
            })
            : schematics_1.noop(),
        updateProject(options),
    ]);
}
exports.default = addLinting;
function updateTsLintConfig(options) {
    return schematics_1.chain([
        workspace_1.updateJsonInTree('tslint.json', (json) => {
            if (json.rulesDirectory &&
                json.rulesDirectory.indexOf('node_modules/codelyzer') === -1) {
                json.rulesDirectory.push('node_modules/codelyzer');
                json.rules = Object.assign(Object.assign({}, json.rules), { 'directive-selector': [true, 'attribute', 'app', 'camelCase'], 'component-selector': [true, 'element', 'app', 'kebab-case'], 'no-conflicting-lifecycle': true, 'no-host-metadata-property': true, 'no-input-rename': true, 'no-inputs-metadata-property': true, 'no-output-native': true, 'no-output-on-prefix': true, 'no-output-rename': true, 'no-outputs-metadata-property': true, 'template-banana-in-box': true, 'template-no-negated-async': true, 'use-lifecycle-interface': true, 'use-pipe-transform-interface': true });
            }
            return json;
        }),
        workspace_1.updateJsonInTree(`${options.projectRoot}/tslint.json`, (json) => {
            json.extends = `${workspace_1.offsetFromRoot(options.projectRoot)}tslint.json`;
            json.linterOptions = {
                exclude: ['!**/*'],
            };
            return json;
        }),
    ]);
}
function updateProject(options) {
    return (host) => {
        return schematics_1.chain([
            workspace_1.updateJsonInTree(workspace_1.getWorkspacePath(host), (json) => {
                const project = json.projects[options.projectName];
                if (options.linter === "tslint" /* TsLint */) {
                    project.architect.lint.options.exclude.push('!' + core_1.join(core_1.normalize(options.projectRoot), '**/*'));
                    if (options.projectType === 'application') {
                        project.architect.lint.options.tsConfig = project.architect.lint.options.tsConfig.filter((path) => path !==
                            core_1.join(core_1.normalize(options.projectRoot), 'tsconfig.spec.json') &&
                            path !==
                                core_1.join(core_1.normalize(options.projectRoot), 'e2e/tsconfig.json'));
                    }
                    if (options.projectType === 'library') {
                        project.architect.lint.options.tsConfig = Array.from(new Set(project.architect.lint.options.tsConfig));
                    }
                }
                if (options.linter === "eslint" /* EsLint */) {
                    project.architect.lint = lint_1.createAngularProjectESLintLintTarget(options.projectRoot);
                    host.delete(`${options.projectRoot}/tslint.json`);
                }
                json.projects[options.projectName] = project;
                return json;
            }),
        ]);
    };
}
exports.addLintingGenerator = ngcli_adapter_1.wrapAngularDevkitSchematic('@nrwl/angular', 'add-linting');
//# sourceMappingURL=add-linting.js.map