"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const rxjs_1 = require("rxjs");
const operators_1 = require("rxjs/operators");
const load_hook_1 = require("../ext/load-hook");
const core_1 = require("@angular-devkit/core");
const path = require("path");
const webpackMerge = require("webpack-merge");
function runBuilderHandler(options, transforms, context, builderHandler, configTransformerName = 'webpackConfiguration') {
    let plugin = null;
    if (options.plugin) {
        plugin = load_hook_1.loadHook(options.plugin);
    }
    setupConfigHook(transforms, options, context, plugin, configTransformerName);
    if (plugin && plugin.pre) {
        plugin.pre(options);
    }
    const result = asObservable(builderHandler(options, context, transforms));
    return result.pipe(operators_1.tap(_ => {
        if (plugin && plugin.post) {
            plugin.post(options);
        }
    }));
}
exports.runBuilderHandler = runBuilderHandler;
function asObservable(result) {
    if (rxjs_1.isObservable(result)) {
        return result;
    }
    if (result instanceof Promise) {
        return rxjs_1.from(result);
    }
    return rxjs_1.of(result);
}
function setupConfigHook(transforms, options, context, plugin, configTransformerName = 'webpackConfiguration') {
    const originalConfigFn = transforms[configTransformerName];
    transforms[configTransformerName] = (config) => {
        if (options.singleBundle) {
            if (!options.keepPolyfills && config.entry && config.entry['polyfills']) {
                delete config.entry['polyfills'];
            }
            if (!options.keepPolyfills && config.entry && config.entry['polyfills-es5']) {
                delete config.entry['polyfills-es5'];
            }
            if (config.optimization) {
                delete config.optimization.runtimeChunk;
                delete config.optimization.splitChunks;
            }
        }
        const keepStyles = !options.bundleStyles || options.keepStyles;
        if (options.singleBundle && !keepStyles && config.entry && config.entry['styles']) {
            delete config.entry['styles'];
        }
        if (options.extraWebpackConfig) {
            const filePath = path.resolve(core_1.getSystemPath(core_1.normalize(context.workspaceRoot)), options.extraWebpackConfig);
            const additionalConfig = require(filePath);
            config = webpackMerge([config, additionalConfig]);
        }
        if (plugin && plugin.config) {
            config = plugin.config(config, options);
        }
        if (options.configHook) {
            const hook = load_hook_1.loadHook(options.configHook);
            config = hook(config);
        }
        if (originalConfigFn) {
            return originalConfigFn(config);
        }
        else {
            return config;
        }
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiLi8iLCJzb3VyY2VzIjpbInNyYy91dGlscy9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUVBLCtCQUE4QztBQUM5Qyw4Q0FBcUM7QUFFckMsZ0RBQTRDO0FBQzVDLCtDQUFnRTtBQUVoRSw2QkFBNkI7QUFDN0IsOENBQThDO0FBVzlDLFNBQWdCLGlCQUFpQixDQUFDLE9BQVksRUFBRSxVQUFzQixFQUFFLE9BQXVCLEVBQUUsY0FBeUMsRUFBRSxxQkFBcUIsR0FBRyxzQkFBc0I7SUFFeEwsSUFBSSxNQUFNLEdBQWtCLElBQUksQ0FBQztJQUNqQyxJQUFJLE9BQU8sQ0FBQyxNQUFNLEVBQUU7UUFDbEIsTUFBTSxHQUFHLG9CQUFRLENBQVMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0tBQzNDO0lBRUQsZUFBZSxDQUFDLFVBQVUsRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sRUFBRSxxQkFBcUIsQ0FBQyxDQUFDO0lBRTdFLElBQUksTUFBTSxJQUFJLE1BQU0sQ0FBQyxHQUFHLEVBQUU7UUFDeEIsTUFBTSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQztLQUNyQjtJQUVELE1BQU0sTUFBTSxHQUFHLFlBQVksQ0FBQyxjQUFjLENBQUMsT0FBTyxFQUFFLE9BQU8sRUFBRSxVQUFVLENBQUMsQ0FBQyxDQUFDO0lBRTFFLE9BQU8sTUFBTSxDQUFDLElBQUksQ0FBQyxlQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUU7UUFDekIsSUFBSSxNQUFNLElBQUksTUFBTSxDQUFDLElBQUksRUFBRTtZQUN6QixNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1NBQ3RCO0lBQ0gsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUVOLENBQUM7QUFyQkQsOENBcUJDO0FBRUQsU0FBUyxZQUFZLENBQUMsTUFBeUI7SUFDN0MsSUFBSSxtQkFBWSxDQUFDLE1BQU0sQ0FBQyxFQUFFO1FBQ3RCLE9BQU8sTUFBTSxDQUFDO0tBQ2pCO0lBQ0QsSUFBSSxNQUFNLFlBQVksT0FBTyxFQUFFO1FBQzdCLE9BQU8sV0FBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0tBQ3JCO0lBQ0QsT0FBTyxTQUFFLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDcEIsQ0FBQztBQUVELFNBQVMsZUFBZSxDQUFDLFVBQXNCLEVBQUUsT0FBWSxFQUFFLE9BQXVCLEVBQUUsTUFBcUIsRUFBRSxxQkFBcUIsR0FBRyxzQkFBc0I7SUFFM0osTUFBTSxnQkFBZ0IsR0FBRyxVQUFVLENBQUMscUJBQXFCLENBQUMsQ0FBQztJQUMzRCxVQUFVLENBQUMscUJBQXFCLENBQUMsR0FBRyxDQUFDLE1BQTZCLEVBQUUsRUFBRTtRQUVwRSxJQUFJLE9BQU8sQ0FBQyxZQUFZLEVBQUU7WUFDeEIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxhQUFhLElBQUksTUFBTSxDQUFDLEtBQUssSUFBSSxNQUFNLENBQUMsS0FBSyxDQUFDLFdBQVcsQ0FBQyxFQUFFO2dCQUN2RSxPQUFPLE1BQU0sQ0FBQyxLQUFLLENBQUMsV0FBVyxDQUFDLENBQUM7YUFDbEM7WUFDRCxJQUFJLENBQUMsT0FBTyxDQUFDLGFBQWEsSUFBSSxNQUFNLENBQUMsS0FBSyxJQUFJLE1BQU0sQ0FBQyxLQUFLLENBQUMsZUFBZSxDQUFDLEVBQUU7Z0JBQzNFLE9BQU8sTUFBTSxDQUFDLEtBQUssQ0FBQyxlQUFlLENBQUMsQ0FBQzthQUN0QztZQUNELElBQUksTUFBTSxDQUFDLFlBQVksRUFBRTtnQkFDdkIsT0FBTyxNQUFNLENBQUMsWUFBWSxDQUFDLFlBQVksQ0FBQztnQkFDeEMsT0FBTyxNQUFNLENBQUMsWUFBWSxDQUFDLFdBQVcsQ0FBQzthQUN4QztTQUNGO1FBRUQsTUFBTSxVQUFVLEdBQUcsQ0FBQyxPQUFPLENBQUMsWUFBWSxJQUFJLE9BQU8sQ0FBQyxVQUFVLENBQUM7UUFFL0QsSUFBSSxPQUFPLENBQUMsWUFBWSxJQUFJLENBQUMsVUFBVSxJQUFJLE1BQU0sQ0FBQyxLQUFLLElBQUksTUFBTSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsRUFBRTtZQUNqRixPQUFPLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUM7U0FDL0I7UUFFRCxJQUFJLE9BQU8sQ0FBQyxrQkFBa0IsRUFBRTtZQUM5QixNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLG9CQUFhLENBQUMsZ0JBQVMsQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLENBQUMsRUFBRSxPQUFPLENBQUMsa0JBQWtCLENBQUMsQ0FBQztZQUMzRyxNQUFNLGdCQUFnQixHQUFHLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUMzQyxNQUFNLEdBQUcsWUFBWSxDQUFDLENBQUMsTUFBTSxFQUFFLGdCQUFnQixDQUFDLENBQUMsQ0FBQztTQUNuRDtRQUNELElBQUksTUFBTSxJQUFJLE1BQU0sQ0FBQyxNQUFNLEVBQUU7WUFDM0IsTUFBTSxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFLE9BQU8sQ0FBQyxDQUFDO1NBQ3pDO1FBRUQsSUFBSSxPQUFPLENBQUMsVUFBVSxFQUFFO1lBQ3BCLE1BQU0sSUFBSSxHQUFHLG9CQUFRLENBQWUsT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFDO1lBQ3hELE1BQU0sR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7UUFFRCxJQUFJLGdCQUFnQixFQUFFO1lBQ3BCLE9BQU8sZ0JBQWdCLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDakM7YUFDSTtZQUNILE9BQU8sTUFBTSxDQUFDO1NBQ2Y7SUFDSCxDQUFDLENBQUM7QUFDSixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRXhlY3V0aW9uVHJhbnNmb3JtZXIgfSBmcm9tIFwiQGFuZ3VsYXItZGV2a2l0L2J1aWxkLWFuZ3VsYXJcIjtcclxuaW1wb3J0IHsgQnVpbGRlckNvbnRleHQsIEJ1aWxkZXJPdXRwdXRMaWtlIH0gZnJvbSBcIkBhbmd1bGFyLWRldmtpdC9hcmNoaXRlY3RcIjtcclxuaW1wb3J0IHsgb2YsIGZyb20sIGlzT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xyXG5pbXBvcnQgeyB0YXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XHJcbmltcG9ydCB7IFBsdWdpbiwgQ29uZmlnSG9va0ZuIH0gZnJvbSBcIi4uL2V4dC9ob29rXCI7XHJcbmltcG9ydCB7IGxvYWRIb29rIH0gZnJvbSBcIi4uL2V4dC9sb2FkLWhvb2tcIjtcclxuaW1wb3J0IHsgZ2V0U3lzdGVtUGF0aCwgbm9ybWFsaXplIH0gZnJvbSAnQGFuZ3VsYXItZGV2a2l0L2NvcmUnO1xyXG5pbXBvcnQgKiBhcyB3ZWJwYWNrIGZyb20gJ3dlYnBhY2snO1xyXG5pbXBvcnQgKiBhcyBwYXRoIGZyb20gJ3BhdGgnO1xyXG5pbXBvcnQgKiBhcyB3ZWJwYWNrTWVyZ2UgZnJvbSAnd2VicGFjay1tZXJnZSc7XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFRyYW5zZm9ybXMge1xyXG4gIHdlYnBhY2tDb25maWd1cmF0aW9uPzogRXhlY3V0aW9uVHJhbnNmb3JtZXI8d2VicGFjay5Db25maWd1cmF0aW9uPjtcclxuIFxyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIEJ1aWxkZXJIYW5kbGVyUGx1c0ZuPEE+IHtcclxuICAoaW5wdXQ6IEEsIGNvbnRleHQ6IEJ1aWxkZXJDb250ZXh0LCB0cmFuc2Zvcm1zOiBUcmFuc2Zvcm1zKTogQnVpbGRlck91dHB1dExpa2U7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBydW5CdWlsZGVySGFuZGxlcihvcHRpb25zOiBhbnksIHRyYW5zZm9ybXM6IFRyYW5zZm9ybXMsIGNvbnRleHQ6IEJ1aWxkZXJDb250ZXh0LCBidWlsZGVySGFuZGxlcjogQnVpbGRlckhhbmRsZXJQbHVzRm48YW55PiwgY29uZmlnVHJhbnNmb3JtZXJOYW1lID0gJ3dlYnBhY2tDb25maWd1cmF0aW9uJykge1xyXG4gIFxyXG4gIGxldCBwbHVnaW46IFBsdWdpbiB8IG51bGwgPSBudWxsO1xyXG4gIGlmIChvcHRpb25zLnBsdWdpbikge1xyXG4gICAgcGx1Z2luID0gbG9hZEhvb2s8UGx1Z2luPihvcHRpb25zLnBsdWdpbik7XHJcbiAgfVxyXG5cclxuICBzZXR1cENvbmZpZ0hvb2sodHJhbnNmb3Jtcywgb3B0aW9ucywgY29udGV4dCwgcGx1Z2luLCBjb25maWdUcmFuc2Zvcm1lck5hbWUpO1xyXG5cclxuICBpZiAocGx1Z2luICYmIHBsdWdpbi5wcmUpIHtcclxuICAgIHBsdWdpbi5wcmUob3B0aW9ucyk7XHJcbiAgfVxyXG5cclxuICBjb25zdCByZXN1bHQgPSBhc09ic2VydmFibGUoYnVpbGRlckhhbmRsZXIob3B0aW9ucywgY29udGV4dCwgdHJhbnNmb3JtcykpO1x0XHJcblxyXG4gIHJldHVybiByZXN1bHQucGlwZSh0YXAoXyA9PiB7XHRcclxuICAgIGlmIChwbHVnaW4gJiYgcGx1Z2luLnBvc3QpIHtcdFxyXG4gICAgICBwbHVnaW4ucG9zdChvcHRpb25zKTtcdFxyXG4gICAgfVx0XHJcbiAgfSkpO1xyXG5cclxufVxyXG5cclxuZnVuY3Rpb24gYXNPYnNlcnZhYmxlKHJlc3VsdDogQnVpbGRlck91dHB1dExpa2UpIHtcclxuICBpZiAoaXNPYnNlcnZhYmxlKHJlc3VsdCkpIHtcclxuICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICB9XHJcbiAgaWYgKHJlc3VsdCBpbnN0YW5jZW9mIFByb21pc2UpIHtcclxuICAgIHJldHVybiBmcm9tKHJlc3VsdCk7XHJcbiAgfVxyXG4gIHJldHVybiBvZihyZXN1bHQpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBzZXR1cENvbmZpZ0hvb2sodHJhbnNmb3JtczogVHJhbnNmb3Jtcywgb3B0aW9uczogYW55LCBjb250ZXh0OiBCdWlsZGVyQ29udGV4dCwgcGx1Z2luOiBQbHVnaW4gfCBudWxsLCBjb25maWdUcmFuc2Zvcm1lck5hbWUgPSAnd2VicGFja0NvbmZpZ3VyYXRpb24nKSB7XHJcbiAgXHJcbiAgY29uc3Qgb3JpZ2luYWxDb25maWdGbiA9IHRyYW5zZm9ybXNbY29uZmlnVHJhbnNmb3JtZXJOYW1lXTtcclxuICB0cmFuc2Zvcm1zW2NvbmZpZ1RyYW5zZm9ybWVyTmFtZV0gPSAoY29uZmlnOiB3ZWJwYWNrLkNvbmZpZ3VyYXRpb24pID0+IHtcclxuXHJcbiAgICBpZiAob3B0aW9ucy5zaW5nbGVCdW5kbGUpIHtcclxuICAgICAgaWYgKCFvcHRpb25zLmtlZXBQb2x5ZmlsbHMgJiYgY29uZmlnLmVudHJ5ICYmIGNvbmZpZy5lbnRyeVsncG9seWZpbGxzJ10pIHtcclxuICAgICAgICBkZWxldGUgY29uZmlnLmVudHJ5Wydwb2x5ZmlsbHMnXTtcclxuICAgICAgfVxyXG4gICAgICBpZiAoIW9wdGlvbnMua2VlcFBvbHlmaWxscyAmJiBjb25maWcuZW50cnkgJiYgY29uZmlnLmVudHJ5Wydwb2x5ZmlsbHMtZXM1J10pIHtcclxuICAgICAgICBkZWxldGUgY29uZmlnLmVudHJ5Wydwb2x5ZmlsbHMtZXM1J107XHJcbiAgICAgIH0gICAgICBcclxuICAgICAgaWYgKGNvbmZpZy5vcHRpbWl6YXRpb24pIHtcclxuICAgICAgICBkZWxldGUgY29uZmlnLm9wdGltaXphdGlvbi5ydW50aW1lQ2h1bms7XHJcbiAgICAgICAgZGVsZXRlIGNvbmZpZy5vcHRpbWl6YXRpb24uc3BsaXRDaHVua3M7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBrZWVwU3R5bGVzID0gIW9wdGlvbnMuYnVuZGxlU3R5bGVzIHx8IG9wdGlvbnMua2VlcFN0eWxlcztcclxuXHJcbiAgICBpZiAob3B0aW9ucy5zaW5nbGVCdW5kbGUgJiYgIWtlZXBTdHlsZXMgJiYgY29uZmlnLmVudHJ5ICYmIGNvbmZpZy5lbnRyeVsnc3R5bGVzJ10pIHtcclxuICAgICAgZGVsZXRlIGNvbmZpZy5lbnRyeVsnc3R5bGVzJ107XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKG9wdGlvbnMuZXh0cmFXZWJwYWNrQ29uZmlnKSB7XHJcbiAgICAgIGNvbnN0IGZpbGVQYXRoID0gcGF0aC5yZXNvbHZlKGdldFN5c3RlbVBhdGgobm9ybWFsaXplKGNvbnRleHQud29ya3NwYWNlUm9vdCkpLCBvcHRpb25zLmV4dHJhV2VicGFja0NvbmZpZyk7XHJcbiAgICAgIGNvbnN0IGFkZGl0aW9uYWxDb25maWcgPSByZXF1aXJlKGZpbGVQYXRoKTtcclxuICAgICAgY29uZmlnID0gd2VicGFja01lcmdlKFtjb25maWcsIGFkZGl0aW9uYWxDb25maWddKTtcclxuICAgIH1cclxuICAgIGlmIChwbHVnaW4gJiYgcGx1Z2luLmNvbmZpZykge1xyXG4gICAgICBjb25maWcgPSBwbHVnaW4uY29uZmlnKGNvbmZpZywgb3B0aW9ucyk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKG9wdGlvbnMuY29uZmlnSG9vaykge1xyXG4gICAgICAgIGNvbnN0IGhvb2sgPSBsb2FkSG9vazxDb25maWdIb29rRm4+KG9wdGlvbnMuY29uZmlnSG9vayk7XHJcbiAgICAgICAgY29uZmlnID0gaG9vayhjb25maWcpO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChvcmlnaW5hbENvbmZpZ0ZuKSB7XHJcbiAgICAgIHJldHVybiBvcmlnaW5hbENvbmZpZ0ZuKGNvbmZpZyk7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgcmV0dXJuIGNvbmZpZztcclxuICAgIH1cclxuICB9O1xyXG59XHJcbiJdfQ==